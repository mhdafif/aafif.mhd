---
import Modal from "@/components/Modal.astro";
import Title from "@/components/Title.astro";
import Tooltip from "@/components/Tooltip.astro";
import { Icon } from "astro-icon/components";
import JestIcon from "@/assets/icon/jest.svg";
import NestjsIcon from "@/assets/icon/nestjs.svg";
import n8nIcon from "@/assets/icon/n8n.svg";
import PrismaIcon from "@/assets/icon/prisma.svg";

const skills = [
  {
    name: "React",
    icon: "devicon:react",
  },
  {
    name: "Vue",
    icon: "devicon:vuejs",
  },
  {
    name: "Next",
    icon: "devicon:nextjs",
  },
  {
    name: "Remix",
    icon: "devicon:remix",
  },
  {
    name: "Astro",
    icon: "devicon:astro",
  },
  {
    name: "Nuxt",
    icon: "devicon:nuxtjs",
  },
  {
    name: "JavaScript",
    icon: "devicon:javascript",
  },
  {
    name: "TypeScript",
    icon: "devicon:typescript",
  },
  {
    name: "HTML5",
    icon: "devicon:html5",
  },
  {
    name: "CSS3",
    icon: "devicon:css3",
  },
  {
    name: "Vite",
    icon: "devicon:vitejs",
  },
  {
    name: "Vitest",
    icon: "devicon:vitest",
  },
  {
    name: "Jest",
    icon: "custom",
    iconSrc: JestIcon,
  },
  {
    name: "Git",
    icon: "devicon:git",
  },
  {
    name: "Docker",
    icon: "devicon:docker",
  },
  {
    name: "Nest JS",
    icon: "custom",
    iconSrc: NestjsIcon,
  },
  {
    name: "Prisma",
    icon: "custom",
    iconSrc: PrismaIcon,
  },
  {
    name: "n8n",
    icon: "custom",
    iconSrc: n8nIcon,
  },
];
---

<div
  class="card-blacki border-off-white/10 relative h-full border border-solid p-4"
>
  <div
    class="shortcut-key laptop:flex text-blacki outline-charcoal group absolute top-0 right-0 z-[1] hidden aspect-square w-7 items-center justify-center rounded-tr-lg rounded-bl-lg outline-4 outline-solid"
  >
    <div
      class="bg-star relative h-full w-full cursor-default rounded-tr-lg rounded-bl-lg text-center text-lg font-semibold transition-all duration-500 ease-out group-hover:opacity-70"
    >
      2
    </div>
    <Tooltip content="Shortcut : 2" />
  </div>

  <div class="flex h-full flex-col">
    <div>
      <Title size="small" text="Stack" />
    </div>

    <div class="mt-8 flex-auto">
      <div class="grid grid-cols-3 gap-2">
        {
          skills.slice(0, 5).map((item, index) => (
            <div
              tabindex={index}
              class="stack-item rounded-5 group hover:shadow-charcoal-glow focus:shadow-charcoal-glow relative z-[1] aspect-square w-full transition-all duration-300 ease-out"
            >
              <div class="bg-charcoal rounded-5 border-charcoal hover:bg-blacki group-focus:bg-blacki flex h-full w-full items-center justify-center border border-solid transition-all duration-300 ease-out">
                <Icon name={item.icon} class="text-5xl grayscale-100" />
              </div>
            </div>
          ))
        }
        <div
          id="more-stack"
          class="bg-star rounded-5 border-charcoal hover:bg-star/80 relative flex h-full w-full cursor-pointer items-center justify-center border border-solid transition-all duration-300 ease-out hover:animate-pulse"
        >
          <Icon name="ic:baseline-open-in-new" class="text-blacki text-5xl" />
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal Stack -->
<Modal title="Stack" modalId="modal-stack">
  <div class="laptop:gap-6 mt-6 flex flex-wrap justify-center gap-3">
    {
      skills.map((item, index) => (
        <div
          tabindex={index}
          class="group stack-item-modal bg-charcoal laptop:p-4 rounded-lg p-3"
        >
          <div class="bg-blacki rounded-5 stack-item relative mb-4 w-full transition-all duration-300 ease-out group-hover:scale-105 group-focus:scale-105">
            <div class="bg-blacki rounded-5 laptop:p-6 flex h-full w-full justify-center p-4">
              {item.icon === "custom" && item.iconSrc ? (
                <item.iconSrc class="laptop:w-16 laptop:h-16 relative h-12 w-12 text-[#99425B] grayscale-100 transition-all duration-300 ease-out group-hover:grayscale-0 group-focus:grayscale-0" />
              ) : (
                <Icon
                  name={item.icon}
                  class="laptop:w-16 laptop:h-16 relative h-12 w-12 grayscale-100 transition-all duration-300 ease-out group-hover:grayscale-0 group-focus:grayscale-0"
                />
              )}
            </div>
          </div>
          <p class="text-off-white laptop:text-lg group-hover:text-star group-focus:text-star text-center text-sm font-medium transition-all duration-300 ease-out">
            {item.name}
          </p>
        </div>
      ))
    }
  </div>
</Modal>

<script>
  const modalStack = document.getElementById("modal-stack");
  // const modalStack = document.getElementById(
  //   "modal-stack"
  // ) as HTMLDialogElement;
  const moreStack = document.getElementById("more-stack");
  const closeBtn = document.getElementById("modal-stack-close");
  const modalContainer = modalStack.querySelector(".modal-container");
  const scrollToTop = document.getElementById("scrollToTop");

  function handleOpenModal(isOpen: boolean) {
    const anyModalOpen = document.querySelector(".modal.modal-open");
    const powerOff = window.sessionStorage.getItem("power") === "off";
    if (powerOff || (isOpen && anyModalOpen && anyModalOpen !== modalStack)) {
      return;
    }

    if (isOpen) {
      // modalStack.showModal();
      modalStack.classList.add("modal-open");
      scrollToTop.classList.add("hidden");
      document.body.style.overflow = "hidden";
    } else {
      // modalStack.close();
      modalContainer.scrollTo({ top: 0, behavior: "smooth" });
      modalStack.classList.remove("modal-open");
      scrollToTop.classList.remove("hidden");
      if (!document.querySelector(".modal.modal-open")) {
        document.body.style.overflow = "";
      }
    }
  }

  addEventListener("keydown", (event) => {
    if (event.key === "2") {
      handleOpenModal(true);
    }
    if (event.key === "Escape") {
      handleOpenModal(false);
    }
  });
  moreStack.addEventListener("click", () => {
    handleOpenModal(true);
  });
  closeBtn.addEventListener("click", () => {
    handleOpenModal(false);
  });
  modalStack.addEventListener("click", (event: any) => {
    if (modalStack.classList.contains("modal-open")) {
      if (!modalContainer.contains(event.target)) {
        handleOpenModal(false);
      }
    }
  });
</script>

<style is:global lang="scss">
  .stack-item-modal {
    width: auto;
    @media (width < 1024px) {
      // width: calc(100% - 1.5rem);
      width: calc((100% - 1.5rem) / 3);
    }
  }
  .stack-item::before,
  .stack-item::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    left: 50%;
    top: 50%;
    translate: -50% -50%;
    background-image: conic-gradient(
      from var(--angle),
      transparent 80%,
      var(--color-star)
    );
    z-index: -1;
    padding: 3px;
    box-sizing: initial;
    border-radius: 10px;
    animation: 3s rotate-angle linear infinite;
    animation-play-state: paused;
    opacity: 0;
  }
  .stack-item:hover,
  .stack-item-modal:hover .stack-item {
    &::before,
    &::after {
      animation-play-state: running;
      opacity: 1;
    }

    &::before {
      opacity: 0.5;
    }
  }
  .stack-item::before {
    filter: blur(1.5em);
    // opacity: 0.5;
  }

  // #modal-stack {
  //   .modal-container {
  //     max-width: 45rem !important;
  //   }
  // }
</style>
